[[part-4]]
= CDI and the Java EE ecosystem

[partintro]
--
The third theme of CDI is _integration_. We've already seen how CDI
helps integrate EJB and JSF, allowing EJBs to be bound directly to JSF
pages. That's just the beginning. The CDI services are integrated into
the very core of the Java EE platform. Even EJB session beans can take
advantage of the dependency injection, event bus, and contextual
lifecycle management that CDI provides.

CDI is also designed to work in concert with technologies outside of the
platform by providing integration points into the Java EE platform via
an SPI. This SPI positions CDI as the foundation for a new ecosystem of
_portable_ extensions and integration with existing frameworks and
technologies. The CDI services will be able to reach a diverse
collection of technologies, such as business process management (BPM)
engines, existing web frameworks and de facto standard component models.
Of course, The Java EE platform will never be able to standardize all
the interesting technologies that are used in the world of Java
application development, but CDI makes it easier to use the technologies
which are not yet part of the platform seamlessly within the Java EE
environment.

We're about to see how to take full advantage of the Java EE platform in
an application that uses CDI. We'll also briefly meet a set of SPIs that
are provided to support portable extensions to CDI. You might not ever
need to use these SPIs directly, but don't take them for granted. You
will likely be using them indirectly, every time you use a third-party
extension, such as http://deltaspike.apache.org/[DeltaSpike].
--

include::ee.asciidoc[]

include::extend.asciidoc[]

include::next.asciidoc[]
