[[part-3]]
= Loose coupling with strong typing

[partintro]
--
The first major theme of CDI is _loose coupling_. We've already seen
three means of achieving loose coupling:

* _alternatives_ enable deployment time polymorphism,
* _producer methods_ enable runtime polymorphism, and
* _contextual lifecycle management_ decouples bean lifecycles.

These techniques serve to enable loose coupling of client and server.
The client is no longer tightly bound to an implementation of an
interface, nor is it required to manage the lifecycle of the
implementation. This approach lets _stateful objects interact as if they
were services_.

Loose coupling makes a system more _dynamic_. The system can respond to
change in a well-defined manner. In the past, frameworks that attempted
to provide the facilities listed above invariably did it by sacrificing
type safety (most notably by using XML descriptors). CDI is the first
technology, and certainly the first specification in the Java EE
platform, that achieves this level of loose coupling in a typesafe way.

CDI provides three extra important facilities that further the goal of
loose coupling:

* _interceptors_ decouple technical concerns from business logic,
* _decorators_ may be used to decouple some business concerns, and
* _event notifications_ decouple event producers from event consumers.

The second major theme of CDI is _strong typing_. The information about
the dependencies, interceptors and decorators of a bean, and the
information about event consumers for an event producer, is contained in
typesafe Java constructs that may be validated by the compiler.

You don't see string-based identifiers in CDI code, not because the
framework is hiding them from you using clever defaulting
rules—so-called "configuration by convention"—but because there are
simply no strings there to begin with!

The obvious benefit of this approach is that _any_ IDE can provide
autocompletion, validation and refactoring without the need for special
tooling. But there is a second, less-immediately-obvious, benefit. It
turns out that when you start thinking of identifying objects, events or
interceptors via annotations instead of names, you have an opportunity
to lift the semantic level of your code.

CDI encourages you develop annotations that model concepts, for example,

* `@Asynchronous`,
* `@Mock`,
* `@Secure` or
* `@Updated`,

instead of using compound names like

* `asyncPaymentProcessor`,
* `mockPaymentProcessor`,
* `SecurityInterceptor` or
* `DocumentUpdatedEvent`.

The annotations are reusable. They help describe common qualities of
disparate parts of the system. They help us categorize and understand
our code. They help us deal with common concerns in a common way. They
make our code more literate and more understandable.

CDI _stereotypes_ take this idea a step further. A stereotype models a
common _role_ in your application architecture. It encapsulates various
properties of the role, including scope, interceptor bindings,
qualifiers, etc, into a single reusable package. (Of course, there is
also the benefit of tucking some of those annotations away).

We're now ready to meet some more advanced features of CDI. Bear in mind
that these features exist to make our code both easier to validate and
more understandable. Most of the time you don't ever really _need_ to
use these features, but if you use them wisely, you'll come to
appreciate their power.
--

include::producermethods.asciidoc[]

include::interceptors.asciidoc[]

include::decorators.asciidoc[]

include::events.asciidoc[]

include::stereotypes.asciidoc[]

include::specialization.asciidoc[]

include::resources.asciidoc[]
